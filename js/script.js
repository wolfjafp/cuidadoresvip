// Funci√≥n autoejecutable para encapsular el c√≥digo
(function() {
    'use strict';

    // --- Variables Constantes ---
    // N√∫mero de WhatsApp de CUIDADORESVIP.CL para recibir consultas
    const WHATSAPP_NUMBER = '56978937482'; // *** N√öMERO ACTUALIZADO ***
    const PREFILLED_MESSAGE_HEADER = "¬°Hola Cuidadores VIP! üëã Quiero cotizar/consultar por sus servicios:";

    // --- Selectores de Elementos Comunes ---
    const currentYearElement = document.getElementById('current-year');
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mainNav = document.querySelector('.main-nav');
    const contactForm = document.getElementById('contact-form');
    const formFeedback = document.getElementById('form-feedback');
    const planButtons = document.querySelectorAll('.plan-cta'); // Botones de planes

    // --- Funciones ---

    /**
     * Actualiza el a√±o en el elemento del footer.
     */
    function updateFooterYear() {
        if (currentYearElement) {
            try {
                currentYearElement.textContent = new Date().getFullYear();
            } catch (error) {
                console.error("Error actualizando el a√±o en el footer:", error);
            }
        }
    }

    /**
     * Alterna la visibilidad del men√∫ de navegaci√≥n m√≥vil.
     * Gestiona clases y atributos ARIA.
     */
    function toggleMobileMenu() {
        if (!mainNav || !mobileMenuToggle) {
            console.warn("Elementos del men√∫ m√≥vil no encontrados.");
            return;
        }
        try {
            const isExpanded = mainNav.classList.toggle('active');
            mobileMenuToggle.setAttribute('aria-expanded', isExpanded.toString());
            const icon = mobileMenuToggle.querySelector('i');
            if (icon) {
                icon.classList.toggle('fa-bars', !isExpanded);
                icon.classList.toggle('fa-times', isExpanded);
            }
        } catch (error) {
            console.error("Error al alternar el men√∫ m√≥vil:", error);
        }
    }

    /**
     * Maneja el env√≠o del formulario de contacto de Cuidadores VIP.
     * Prepara y abre el enlace de WhatsApp con los datos.
     * @param {Event} event - El evento de env√≠o del formulario.
     */
    function handleContactFormSubmit(event) {
        event.preventDefault(); // Prevenir el env√≠o normal

        if (!contactForm || !formFeedback) {
             console.warn("Formulario de contacto o elemento de feedback no encontrado.");
             return;
        }

        try {
            formFeedback.textContent = ''; // Limpiar feedback previo
            formFeedback.className = 'form-feedback'; // Resetear clases

            // Obtener valores de los campos del formulario CUIDADORESVIP
            const name = contactForm.elements['name']?.value?.trim() ?? '';
            const phone = contactForm.elements['phone']?.value?.trim() ?? '';
            const email = contactForm.elements['email']?.value?.trim() ?? ''; // Opcional
            const comuna = contactForm.elements['comuna']?.value?.trim() ?? '';
            const petType = contactForm.elements['pet-type']?.value ?? '';
            const servicePlan = contactForm.elements['service-plan']?.value ?? '';
            const dates = contactForm.elements['dates']?.value?.trim() ?? ''; // Opcional
            const message = contactForm.elements['message']?.value?.trim() ?? '';

            // --- Validaci√≥n ---
            let firstInvalidField = null;

            // 1. Usar checkValidity() para campos requeridos b√°sicos (HTML5)
            if (!contactForm.checkValidity()) {
                formFeedback.textContent = '¬°Ojo! Parece que falta completar algunos campos obligatorios (*).';
                formFeedback.classList.add('error');
                contactForm.reportValidity(); // Muestra mensajes nativos del navegador
                firstInvalidField = contactForm.querySelector(':invalid');
                if (firstInvalidField) {
                    // Scroll suave hacia el campo inv√°lido si es posible
                     try {
                        firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                     } catch(e) {
                         // Si falla el scroll, solo enfocar
                        firstInvalidField.focus();
                     }
                }
                return;
            }

            // Validaci√≥n de tel√©fono eliminada para mayor flexibilidad


            // --- Construcci√≥n del Mensaje WhatsApp ---
            let whatsappMessage = `${PREFILLED_MESSAGE_HEADER}

*Nombre:* ${name}
*Tel√©fono:* ${phone}`;

            if (email) { // A√±adir email solo si fue ingresado
                whatsappMessage += `\n*Email:* ${email}`;
            }

            whatsappMessage += `
*Comuna:* ${comuna}
*Mascota(s):* ${petType}
*Plan/Horas:* ${servicePlan}`;

            if (dates) { // A√±adir fechas solo si fueron ingresadas
                whatsappMessage += `\n*Fechas Estimadas:* ${dates}`;
            }

            whatsappMessage += `

*Mensaje Adicional:*
${message}`;

            // --- Generar y Abrir Enlace WhatsApp ---
            const encodedMessage = encodeURIComponent(whatsappMessage);
            const cleanPhoneNumber = WHATSAPP_NUMBER.replace(/[^0-9]/g, ''); // Limpiar el n√∫mero destino

            if (!cleanPhoneNumber) {
                 console.error("N√∫mero de WhatsApp destino no v√°lido:", WHATSAPP_NUMBER);
                 formFeedback.textContent = 'Error configurando el enlace de contacto. Av√≠sanos por favor.';
                 formFeedback.classList.add('error');
                 return;
            }

            const whatsappURL = `https://wa.me/${cleanPhoneNumber}?text=${encodedMessage}`;

            formFeedback.textContent = '¬°Genial! Preparando tu mensaje para WhatsApp... üêæ';
            formFeedback.classList.add('success');

            // Abrir WhatsApp en nueva pesta√±a/app
            const whatsappWindow = window.open(whatsappURL, '_blank', 'noopener,noreferrer');

             // Si falla la apertura (pop-up bloqueado), informar al usuario
             if (!whatsappWindow || whatsappWindow.closed || typeof whatsappWindow.closed == 'undefined') {
                // Dar un peque√±o margen por si tarda en abrir
                setTimeout(() => {
                    // Volver a chequear si realmente no se abri√≥
                    if (!whatsappWindow || whatsappWindow.closed || typeof whatsappWindow.closed == 'undefined') {
                         formFeedback.textContent = 'Parece que tu navegador bloque√≥ la ventana de WhatsApp. ¬°Intenta de nuevo o cont√°ctanos directamente!';
                         formFeedback.classList.remove('success');
                         formFeedback.classList.add('error');
                    }
                }, 1000); // Esperar 1 segundo
            }


             // Opcional: Resetear formulario despu√©s de un breve tiempo
             /*
             setTimeout(() => {
                 if (contactForm) { contactForm.reset(); }
                 if (formFeedback) {
                    formFeedback.textContent = '';
                    formFeedback.className = 'form-feedback';
                 }
             }, 4000); // Resetear despu√©s de 4 segundos
             */


        } catch (error) {
            console.error("Error procesando el formulario de contacto:", error);
            formFeedback.textContent = '¬°Ups! Hubo un problema t√©cnico al enviar tu consulta. Intenta de nuevo o cont√°ctanos directo.';
            formFeedback.classList.add('error');
        }
    }

    /**
     * Maneja el clic en los botones de los planes para autoseleccionar
     * la opci√≥n en el formulario y hacer scroll.
     * @param {Event} event
     */
    function handlePlanButtonClick(event) {
        event.preventDefault(); // Prevenir navegaci√≥n si el href es solo #contacto

        const planValue = event.target.dataset.plan; // Obtener valor desde data-plan
        const planSelectElement = contactForm.elements['service-plan'];
        const contactSection = document.getElementById('contacto');

        if (planValue && planSelectElement) {
            planSelectElement.value = planValue; // Establecer el valor en el select
        }

        // Hacer scroll suave hasta la secci√≥n de contacto
        if (contactSection) {
             // Peque√±o retraso para asegurar que el valor se establezca antes del scroll
            setTimeout(() => {
                 contactSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                 // Opcional: Enfocar el primer campo del formulario despu√©s del scroll
                 const firstInput = contactForm.querySelector('input:not([type="hidden"]), select, textarea');
                 if (firstInput) {
                    // firstInput.focus(); // Puede ser molesto a veces, probar si gusta
                 }
            }, 100);
        } else {
            console.warn("Secci√≥n de contacto no encontrada para hacer scroll.");
        }
    }

    // --- Inicializaci√≥n y Event Listeners ---

    document.addEventListener('DOMContentLoaded', () => {
        updateFooterYear(); // Actualizar a√±o en footer

        // Manejo del men√∫ m√≥vil
        if (mobileMenuToggle && mainNav) {
            mobileMenuToggle.addEventListener('click', toggleMobileMenu);
            // Asegurar estado inicial correcto del men√∫ m√≥vil
            if (window.innerWidth <= 992) {
                mainNav.classList.remove('active');
                mobileMenuToggle.setAttribute('aria-expanded', 'false');
                const icon = mobileMenuToggle.querySelector('i');
                 if(icon){
                    icon.classList.remove('fa-times');
                    icon.classList.add('fa-bars');
                 }
            }
        } else {
             console.warn("Elementos del men√∫ m√≥vil (toggle o nav) no encontrados.");
        }

        // Manejo del formulario de contacto
        if (contactForm) {
            contactForm.addEventListener('submit', handleContactFormSubmit);
        } else {
             console.warn("Formulario de contacto no encontrado.");
        }

        // A√±adir listener a los botones de planes
        if (planButtons.length > 0 && contactForm) { // Asegurar que exista el form tambi√©n
            planButtons.forEach(button => button.addEventListener('click', handlePlanButtonClick));
        } else if (!contactForm) {
            console.warn("Formulario de contacto no encontrado, no se pudo a√±adir listeners a botones de plan.");
        }

        console.log("CUIDADORESVIP.CL script inicializado (v. con correcciones).");
    });

})(); // Fin de la funci√≥n autoejecutable